#!/usr/bin/env bash
function pglab-project () {
    local HELP=""
    if [[ "$1" == "help" ]]; then
        HELP="true"
    else
        while true; do
            case "$1" in
                get|list) command=$1; shift 1; break ;;
                --) addErrorMessage "Invalid option '$1'"; shift ;;
                -*|--*) addErrorMessage "Invalid option '$1'"; shift ;;
                * )
                    [ -z ${1+x} ] && break
                    addErrorMessage "Invalid command choice '$1', valid choices are: get, list"
                    break
                ;;
            esac
        done
    fi
    if [[ "$HELP" == "true" ]]; then
        pglab-project-help
        return $?
    fi
    if [[ "$USAGE" == "true" ]]; then
        >&2 pglab-usage true false
        return $?
    fi
    if [[ "$command" != "" ]]; then
        use-command "$command" $@
        return $?
    fi
    check-dependencies-parameters true false
    exitCode=$?
    if [ $exitCode -ne 0 ]; then
        return $exitCode
    fi

    >&2 echo
    usageContent=$(pglab-raw-usage true false)
    exitCode=$?
    >&2 echo "$usageContent"
    if [ $exitCode -ne 0 ]; then
        return $exitCode
    fi
    >&2 echo 
    >&2 echo "$commandEntrypoint: error: the following arguments are required: subcommand"
    >&2 echo
}

function pglab-project-help () {
    echo "$(cat <<EOF
_COMMAND_ENTRYPOINT_()

NAME
       _COMMAND_ENTRYPOINT_ -

DESCRIPTION
       Gitlab project is an structure of Gitlab that has an repository and 
       other things related to it, as variables and other configurations
       used on it.

SYNOPSIS
          _COMMAND_ENTRYPOINT_ [options] <command> [parameters]

       Use command help for information on a specific command. The synopsis for
       each command shows its parameters and their usage. Optional  parameters
       are shown in square brackets.

HELP COMMAND
       help

       display this help and exit

GLOBAL OPTIONS
       -h, --help

       display an usage help message and exit

AVAILABLE COMMANDS
       o get
       o list

EOF
)" | sed -E "s#_COMMAND_ENTRYPOINT_#$commandEntrypoint#g" | less
    return $?
}
[[ "$PGLAB_IGNORE_SCRIPT_AUTOSTART" != "true" ]] && commandExecAutostart="$(basename "$(readlink -f -- "$0")" | sed -E "s/ /-/g")"
if [[ "$commandExecAutostart" == "pglab-project" ]]; then
    [[ -L "$0" ]] \
        && SCRIPT_DIR=$(dirname -- "$( readlink -f -- "$0"; )") \
        || SCRIPT_DIR="$(dirname "${BASH_SOURCE[0]}")"
    source "${SCRIPT_DIR}/../common/all"
    $commandExecAutostart $@
    exit $?
fi