#!/usr/bin/env bash
function pglab-group-raw-get () {
    local gitlabToken="$1"
    local groupParam="$2"
    # Verify if parameter is number, then it is ID, or just full name
    if [ "$((( $groupParam )) 2>/dev/null && echo $? || echo $?)" -eq 0 ]; then
        SEARCH_BY="ID"
        GROUP_ID="$groupParam"
        GROUP_PATH="$GROUP_ID"
    else
        SEARCH_BY="FULL_PATH"
        GROUP_FULL_PATH_PARSED=$(echo "$groupParam" | sed -E "s/\//%2F/g")
        GROUP_PATH="$GROUP_FULL_PATH_PARSED"
    fi

    # Get group
    GROUP_JSON=$(curl -s -f --header "Authorization: Bearer $gitlabToken" "https://gitlab.com/api/v4/groups/${GROUP_PATH}?with_projects=false")
    if [ $? -ne 0 ]; then
        echo -e "Error: failed request to get group"
        exit 1
    fi

    # Just format json to view it in terminal
    echo "$GROUP_JSON" | jq .
}

function pglab-group-get () {
    while true; do
        case "$1" in
            help) MANUAL="true"; break ;;
            --group=*) GROUP_PARAM="${1#*=}"; shift 1 ;;
            --group) GROUP_PARAM="$2";  shift 2 ;;
            -h|--help) HELP="true"; break ;;
            --) addErrorMessage "Invalid option '$1'"; shift ;;
            -*|--*) addErrorMessage "Invalid option '$1'"; shift ;;
            * )
                [ -z ${1+x} ] && break
                addErrorMessage "Invalid parameter with value '$1'"
                shift 1
            ;;
        esac
    done
    function verifyParameters () {
        if [ -z ${GROUP_PARAM+x} ]; then
            addErrorMessage "Parameter group (--group) is required"
        fi
    }
    [[ "$MANUAL" == "true" ]] && manual-output
    [[ "$HELP" == "true" ]] && help-output
    check-dependencies-parameters verifyParameters

    pglab-group-raw-get "$GITLAB_TOKEN" "$GROUP_PARAM"
}