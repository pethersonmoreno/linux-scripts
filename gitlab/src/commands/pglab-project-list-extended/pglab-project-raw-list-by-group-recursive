#!/usr/bin/env bash
function pglab-project-raw-list-by-group-recursive () {
    local gitlabToken="$1"
    local groupParam="$2"
    local getContainerRegistries="$3"
    local getContainerRegistryTags="$4"
    local getContainerRegistryDetailedTags="$5"
    local getRemoteMirrors="$6"
    local per_page="$7"
    local groupPath="$(pglab-get-number-or-url-encoded "$groupParam")"
    local pendingGroups="$groupParam"
    local listProjects="[]"
    local groupItem=""
    local groupItemProjects=""
    local groupSubgroups=""
    local groupSubgroupsFullPaths=""
    while [ "$pendingGroups" != "" ]; do
        groupItem=$(echo "$pendingGroups" | sed -E "s/^([^ ]+)( .+)?/\1/")

        pendingGroups=$(echo "$pendingGroups" | sed -E "s/^[^ ]+ ?//")

        groupItemProjects=$(pglab-project-raw-list-by-group "$gitlabToken" "$groupItem" "$getContainerRegistries" "$getContainerRegistryTags" "$getContainerRegistryDetailedTags" "$getRemoteMirrors" "$per_page")
        exitCode=$?
        if [ $exitCode -ne 0 ]; then
            return $exitCode
        fi
        listProjects=$(pglab-json-array-join "$listProjects" "$groupItemProjects")

        # Get subgroups of the current group, it will be used to get projects in this group
        groupSubgroups=$(pglab --restart-entrypoint group list-subgroups --parent-group "$groupItem")
        exitCode=$?
        if [ $exitCode -ne 0 ]; then
            return $exitCode
        fi
        # If found at least one subgroup, add it to pending groups to get projects
        groupSubgroupsFullPaths=$(echo "$groupSubgroups" | jq -r "[.[].full_path]|join(\" \")")
        if [ "$groupSubgroupsFullPaths" != "" ]; then
            pendingGroups=$(echo "$pendingGroups $groupSubgroupsFullPaths" | sed -E "s/^[ ]+//")
        fi
    done
    echo "$listProjects" | jq .
    return $?
}