#!/usr/bin/env bash
function pglab-group-raw-list-subgroups-in-page () {
    local gitlabToken="$1"
    local parentGroupParam="$2"
    local per_page="$3"
    local page="$4"
    parentGroupPath="$(pglab-get-number-or-url-encoded "$parentGroupParam")"
    # Try get subgroups in the parent group in the page
    requestUrl="https://gitlab.com/api/v4/groups/${parentGroupPath}/subgroups?per_page=$per_page&page=$page"
    listSubgroupsPage=$(curl -s -f --header "Authorization: Bearer $gitlabToken" "${requestUrl}")
    # If failed try get subgroups in a parent group
    if [ $? -ne 0 ]; then
        echo -e "Error: failed request to get subgroups in a parent group"
        exit 1
    fi

    echo "$listSubgroupsPage" | jq .
}
function pglab-group-raw-list-subgroups () {
    local gitlabToken="$1"
    local parentGroupParam="$2"
    local per_page="$3"
    # Get all subgroups in the group
    listSubgroups="[]"
    page=0
    page_empty=false
    while [ $page_empty != true ]; do
        page=$(($page+1))
        listSubgroupsPage=$(pglab-group-raw-list-subgroups-in-page "$gitlabToken" "$parentGroupParam" "$per_page" "$page")
        listSubgroups=$(pglab-json-array-join "$listSubgroups" "$listSubgroupsPage")
        page_empty=$(pglab-json-array-is-empty "$listSubgroupsPage")
    done

    echo "$listSubgroups" | jq .
}

function pglab-group-list-subgroups () {
    local PER_PAGE=1000
    local PAGE=""
    if [[ "$1" == "help" ]]; then
        HELP="true"
    else
        while true; do
            case "$1" in
                --parent-group=*) PARENT_GROUP_PARAM="${1#*=}"; shift 1 ;;
                --parent-group) PARENT_GROUP_PARAM="$2";  shift 2 ;;
                --per-page=*) PER_PAGE="${1#*=}"; shift 1 ;;
                --per-page) PER_PAGE="$2";  shift 2 ;;
                --page=*) PAGE="${1#*=}"; shift 1 ;;
                --page) PAGE="$2";  shift 2 ;;
                --) addErrorMessage "Invalid option '$1'"; shift ;;
                -*|--*) addErrorMessage "Invalid option '$1'"; shift ;;
                * )
                    [ -z ${1+x} ] && break
                    addErrorMessage "Invalid parameter with value '$1'"
                    shift 1
                ;;
            esac
        done
    fi
    function verifyParameters () {
        if [ -z ${PARENT_GROUP_PARAM+x} ]; then
            addErrorMessage "Parameter parent group (--parent-group) is required"
        fi
    }
    [[ "$HELP" == "true" ]] && pglab-group-list-subgroups-help
    [[ "$USAGE" == "true" ]] && pglab-usage false false
    check-dependencies-parameters verifyParameters false false

    if [ ! -z "$PAGE" ]; then
        pglab-group-raw-list-subgroups-in-page "$GITLAB_TOKEN" "$PARENT_GROUP_PARAM" "$PER_PAGE" "$PAGE"
        exit 0
    fi
    pglab-group-raw-list-subgroups "$GITLAB_TOKEN" "$PARENT_GROUP_PARAM" "$PER_PAGE"
}

function pglab-group-list-subgroups-help () {
    echo "$(cat <<EOF
_COMMAND_ENTRYPOINT_()

NAME
       _COMMAND_ENTRYPOINT_ -

DESCRIPTION
       Get a list of subgroups in a parent group.

SYNOPSIS
            _COMMAND_ENTRYPOINT_
          [help]
          --parent-group <value>

HELP COMMAND
       help

       display this help and exit

OPTIONS
       --parent-group (string|number)
          The parent group to get its subgroups.

          This parameter value is the parent group ID if it is a number, or if
          it is not a number this parameter value is the parent group full path.

EOF
)" | sed -E "s#_COMMAND_ENTRYPOINT_#$commandEntrypoint#g" | less
    exit 0
}
[[ "$PGLAB_IGNORE_SCRIPT_AUTOSTART" != "true" ]] && commandExecAutostart="$(basename "$(readlink -f -- "$0")" | sed -E "s/ /-/g")"
if [[ "$commandExecAutostart" == "pglab-group-list-subgroups" ]]; then
    [[ -L "$0" ]] \
        && SCRIPT_DIR=$(dirname -- "$( readlink -f -- "$0"; )") \
        || SCRIPT_DIR="$(dirname "${BASH_SOURCE[0]}")"
    source "${SCRIPT_DIR}/../common/all"
    $commandExecAutostart $@
fi