#!/usr/bin/env bash
function pglab-project-raw-get () {
    local gitlabToken="$1"
    local projectParam="$2"
    local projectPath="$(pglab-get-number-or-url-encoded "$projectParam")"
    local PROJECT_JSON=""
    local exitCode=""
    # Get project
    PROJECT_JSON=$(curl -s -f --header "Authorization: Bearer $gitlabToken" "https://gitlab.com/api/v4/projects/${projectPath}")
    exitCode="$?"
    if [ $exitCode -ne 0 ]; then
        >&2 echo -e "Error: failed request to get project"
        return "$exitCode"
    fi

    echo "$PROJECT_JSON" | jq .
}
function pglab-project-get () {
    local HELP=""
    if [[ "$1" == "help" ]]; then
        HELP="true"
    else
        while true; do
            case "$1" in
                --project=*) PROJECT_PARAM="${1#*=}"; shift 1 ;;
                --project) PROJECT_PARAM="$2";  shift 2 ;;
                --) addErrorMessage "Invalid option '$1'"; shift ;;
                -*|--*) addErrorMessage "Invalid option '$1'"; shift ;;
                * )
                    [ -z ${1+x} ] && break
                    addErrorMessage "Invalid parameter with value '$1'"
                    shift 1
                ;;
            esac
        done
    fi
    function verifyParameters () {
        if [ -z ${PROJECT_PARAM+x} ]; then
            addErrorMessage "Parameter project (--project) is required"
        fi
    }
    if [[ "$HELP" == "true" ]]; then
        pglab-project-get-help
        return $?
    fi
    if [[ "$USAGE" == "true" ]]; then
        >&2 pglab-usage false false
        return $?
    fi
    check-dependencies-parameters verifyParameters false false
    exitCode=$?
    if [ $exitCode -ne 0 ]; then
        return $exitCode
    fi

    pglab-project-raw-get "$GITLAB_TOKEN" "$PROJECT_PARAM"
    return $?
}

function pglab-project-get-help () {
    echo "$(cat <<EOF
_COMMAND_ENTRYPOINT_()

NAME
       _COMMAND_ENTRYPOINT_ -

DESCRIPTION
       Get detailed information for an Gitlab project.

SYNOPSIS
            _COMMAND_ENTRYPOINT_
          [help]
          --project <value>

HELP COMMAND
       help

       display this help and exit

OPTIONS
       --project (string|number)
          The project to get detailed information.

          This parameter value is the project ID if it is a number, or if
          it is not a number this parameter value is the project full path.

EOF
)" | sed -E "s#_COMMAND_ENTRYPOINT_#$commandEntrypoint#g" | less
    return $?
}
[[ "$PGLAB_IGNORE_SCRIPT_AUTOSTART" != "true" ]] && commandExecAutostart="$(basename "$(readlink -f -- "$0")" | sed -E "s/ /-/g")"
if [[ "$commandExecAutostart" == "pglab-project-get" ]]; then
    [[ -L "$0" ]] \
        && SCRIPT_DIR=$(dirname -- "$( readlink -f -- "$0"; )") \
        || SCRIPT_DIR="$(dirname "${BASH_SOURCE[0]}")"
    source "${SCRIPT_DIR}/../common/all"
    $commandExecAutostart $@
    exit $?
fi