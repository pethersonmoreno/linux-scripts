#!/usr/bin/env bash
function pglab-group-raw-get () {
    local gitlabToken="$1"
    local groupParam="$2"
    # Verify if parameter is number, then it is ID, or just full name
    if [ "$((( $groupParam )) 2>/dev/null && echo $? || echo $?)" -eq 0 ]; then
        SEARCH_BY="ID"
        GROUP_ID="$groupParam"
        GROUP_PATH="$GROUP_ID"
    else
        SEARCH_BY="FULL_PATH"
        GROUP_FULL_PATH_PARSED=$(echo "$groupParam" | sed -E "s/\//%2F/g")
        GROUP_PATH="$GROUP_FULL_PATH_PARSED"
    fi

    # Get group
    GROUP_JSON=$(curl -s -f --header "Authorization: Bearer $gitlabToken" "https://gitlab.com/api/v4/groups/${GROUP_PATH}?with_projects=false")
    if [ $? -ne 0 ]; then
        echo -e "Error: failed request to get group"
        exit 1
    fi

    # Just format json to view it in terminal
    echo "$GROUP_JSON" | jq .
}

function pglab-group-get () {
    if [[ "$1" == "help" ]]; then
        HELP="true"
    else
        while true; do
            case "$1" in
                --group=*) GROUP_PARAM="${1#*=}"; shift 1 ;;
                --group) GROUP_PARAM="$2";  shift 2 ;;
                --) addErrorMessage "Invalid option '$1'"; shift ;;
                -*|--*) addErrorMessage "Invalid option '$1'"; shift ;;
                * )
                    [ -z ${1+x} ] && break
                    addErrorMessage "Invalid parameter with value '$1'"
                    shift 1
                ;;
            esac
        done
    fi
    function verifyParameters () {
        if [ -z ${GROUP_PARAM+x} ]; then
            addErrorMessage "Parameter group (--group) is required"
        fi
    }
    [[ "$HELP" == "true" ]] && pglab-group-get-help
    [[ "$USAGE" == "true" ]] && pglab-usage false false
    check-dependencies-parameters verifyParameters

    pglab-group-raw-get "$GITLAB_TOKEN" "$GROUP_PARAM"
}

function pglab-group-get-help () {
    echo "$(cat <<EOF
_COMMAND_ENTRYPOINT_()

NAME
       _COMMAND_ENTRYPOINT_ -

DESCRIPTION
       Get detailed information for an Gitlab project.

SYNOPSIS
            _COMMAND_ENTRYPOINT_
          [help]
          --project <value>

HELP COMMAND
       help

       display this help and exit

OPTIONS
       --project (string|number)
          The project to get detailed information.

          This parameter value is the project ID if it is a number, or if
          it is not a number this parameter value is the project full path.

EOF
)" | sed -E "s#_COMMAND_ENTRYPOINT_#$commandEntrypoint#g" | less
    exit 0
}
if [[ "$(basename "$(readlink -f -- "$0")")" == "pglab-group-get" ]]; then
    [[ -L "$0" ]] \
        && SCRIPT_DIR=$(dirname -- "$( readlink -f -- "$0"; )") \
        || SCRIPT_DIR="$(dirname "${BASH_SOURCE[0]}")"
    source "${SCRIPT_DIR}/../common/all"
    $(basename "$(readlink -f -- "$0")") $@
fi