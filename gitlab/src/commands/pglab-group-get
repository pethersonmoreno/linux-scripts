#!/usr/bin/env bash
function pglab-group-raw-get () {
    local gitlabToken="$1"
    local groupParam="$2"
    local groupPath="$(pglab-get-number-or-url-encoded "$groupParam")"
    local GROUP_JSON=""
    local exitCode=""
    # Get group
    GROUP_JSON=$(curl -s -f --header "Authorization: Bearer $gitlabToken" "https://gitlab.com/api/v4/groups/${groupPath}?with_projects=false")
    exitCode="$?"
    if [ $exitCode -ne 0 ]; then
        >&2 echo -e "Error: failed request to get group"
        return "$exitCode"
    fi

    echo "$GROUP_JSON" | jq .
    return $?
}

function pglab-group-get () {
    local HELP=""
    if [[ "$1" == "help" ]]; then
        HELP="true"
    else
        while true; do
            case "$1" in
                --group=*) GROUP_PARAM="${1#*=}"; shift 1 ;;
                --group) GROUP_PARAM="$2"; shift 2 ;;
                --) addErrorMessage "Invalid option '$1'"; shift ;;
                -*|--*) addErrorMessage "Invalid option '$1'"; shift ;;
                * )
                    [ -z ${1+x} ] && break
                    addErrorMessage "Invalid parameter with value '$1'"
                    shift 1
                ;;
            esac
        done
    fi
    function verifyParameters () {
        if [ -z "${GROUP_PARAM}" ]; then
            addErrorMessage "Parameter group (--group) is required"
        fi
    }
    if [[ "$HELP" == "true" ]]; then
        pglab-group-get-help
        return $?
    fi
    if [[ "$USAGE" == "true" ]]; then
        >&2 pglab-usage false false
        return $?
    fi
    check-dependencies-parameters verifyParameters false false
    exitCode=$?
    if [ $exitCode -ne 0 ]; then
        return $exitCode
    fi

    pglab-group-raw-get "$GITLAB_TOKEN" "$GROUP_PARAM"
    return $?
}

function pglab-group-get-help () {
    echo "$(cat <<EOF
_COMMAND_ENTRYPOINT_()

NAME
       _COMMAND_ENTRYPOINT_ -

DESCRIPTION
       Get detailed information for an Gitlab group.

SYNOPSIS
            _COMMAND_ENTRYPOINT_
          [help]
          --group <value>

HELP COMMAND
       help

       display this help and exit

OPTIONS
       --group (string|number)
          The group to get detailed information.

          This parameter value is the group ID if it is a number, or if
          it is not a number this parameter value is the group full path.

EOF
)" | sed -E "s#_COMMAND_ENTRYPOINT_#$commandEntrypoint#g" | less
    return $?
}
[[ "$PGLAB_IGNORE_SCRIPT_AUTOSTART" != "true" ]] && commandExecAutostart="$(basename "$(readlink -f -- "$0")" | sed -E "s/ /-/g")"
if [[ "$commandExecAutostart" == "pglab-group-get" ]]; then
    [[ -L "$0" ]] \
        && SCRIPT_DIR=$(dirname -- "$( readlink -f -- "$0"; )") \
        || SCRIPT_DIR="$(dirname "${BASH_SOURCE[0]}")"
    source "${SCRIPT_DIR}/../common/all"
    $commandExecAutostart $@
    exit $?
fi