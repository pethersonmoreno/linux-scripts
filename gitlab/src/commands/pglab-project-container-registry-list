#!/usr/bin/env bash
function pglab-project-container-registry-fill-detailed-tags () {
    local listProjectContainerRegistriesPage="$1"
    if [ "$(echo "$listProjectContainerRegistriesPage" | jq length)" -gt 0 ]; then
        listProjectContainerRegistriesPageWithTagsDetailed="[]"
        while IFS=$'\t' read -r itemContainerRegistryIndex; do
            itemContainerRegistry=$(echo "$listProjectContainerRegistriesPage" | jq ".[${itemContainerRegistryIndex}]")
            projectId="$(echo "$itemContainerRegistry" | jq .project_id)"
            containerRegistryId="$(echo "$itemContainerRegistry" | jq .id)"
            ITEM_CONTAINER_REGISTRY_TAGS="$(echo "$itemContainerRegistry" | jq .tags)"
            containerRegistryTags="[]"
            itemContainerRegistryTotalSize=0
            if [[ $(echo "$ITEM_CONTAINER_REGISTRY_TAGS" | jq -r '.|length') -gt 0 ]]; then
                while IFS=$'\t' read -r containerRegistryTagIndex; do
                    containerRegistryTag=$(echo "$ITEM_CONTAINER_REGISTRY_TAGS" | jq ".[${containerRegistryTagIndex}]")
                    tagName="$(echo "$containerRegistryTag" | jq -r .name)"
                    tagDetail=$(pglab --restart-entrypoint project container-registry get-tag --project "$projectId" --container-registry "$containerRegistryId" --tag "$tagName")
                    exitCode="$?"
                    if [ $exitCode -ne 0 ]; then
                        return "$exitCode"
                    fi
                    tagTotalSize="$(echo "$tagDetail" | jq -r .total_size)"

                    itemContainerRegistryTotalSize=$(($itemContainerRegistryTotalSize + $tagTotalSize))

                    containerRegistryTags=$(pglab-json-array-join "$containerRegistryTags" "[$tagDetail]")
                done <<< "$(echo "$ITEM_CONTAINER_REGISTRY_TAGS" | jq -r '.|keys|map([.|tostring])|.[]|@tsv')"
            fi
            itemContainerRegistry=$( (echo "$itemContainerRegistry" ; echo "$containerRegistryTags") | jq ". + { tags: input }")
            itemContainerRegistry=$(echo "$itemContainerRegistry" | jq ".total_size = ${itemContainerRegistryTotalSize} | .total_size_formatted = \"$(pglab-format-qtd-bytes "$itemContainerRegistryTotalSize" GB)\"")
            listProjectContainerRegistriesPageWithTagsDetailed=$( (echo "$listProjectContainerRegistriesPageWithTagsDetailed" ; echo "$itemContainerRegistry") | jq '. + [input]')
        done <<< "$(echo "$listProjectContainerRegistriesPage" | jq -r ".|keys|map([.|tostring])|.[]|@tsv")"
        echo "$listProjectContainerRegistriesPageWithTagsDetailed" | jq .
        return $?
    fi
    echo "$listProjectContainerRegistriesPage"
    return $?
}
function pglab-project-container-registry-raw-list-in-page () {
    local gitlabToken="$1"
    local projectParam="$2"
    local includeTags="$3"
    local includeDetailedTags="$4"
    local per_page="$5"
    local page="$6"
    local projectPath="$(pglab-get-number-or-url-encoded "$projectParam")"
    local requestUrl=""
    local listProjectContainerRegistriesPage=""
    local exitCode=""
    local additionalCurlParams=""
    [[ "$PGLAB_CURL_DISABLE_SSL_VERIFICATION" == "true" ]] && additionalCurlParams="${additionalCurlParams} -k"
    requestUrl="https://gitlab.com/api/v4/projects/${projectPath}/registry/repositories?per_page=$per_page&page=$page"
    if [[ "$includeTags" == "true" ]] || [[ "$includeDetailedTags" == "true" ]]; then
        requestUrl="${requestUrl}&tags=true"
    fi
    listProjectContainerRegistriesPage=$(curl $additionalCurlParams -s -f --header "Authorization: Bearer $gitlabToken" "${requestUrl}")
    exitCode="$?"
    if [ $exitCode -ne 0 ]; then
        >&2 echo -e "Error: failed request to get container registries in a project"
        return "$exitCode"
    fi

    if [[ "$includeDetailedTags" == "true" ]]; then
        listProjectContainerRegistriesPage="$(pglab-project-container-registry-fill-detailed-tags "$listProjectContainerRegistriesPage")"
        exitCode="$?"
        if [ $exitCode -ne 0 ]; then
            return "$exitCode"
        fi
    fi

    echo "$listProjectContainerRegistriesPage" | jq .
    return $?
}
function pglab-project-container-registry-raw-list () {
    local gitlabToken="$1"
    local projectParam="$2"
    local includeTags="$3"
    local includeDetailedTags="$4"
    local per_page="$5"
    local listProjectContainerRegistries="[]"
    local page=0
    local page_empty=false
    local listProjectContainerRegistriesPage=""
    while [ $page_empty != true ]; do
        page=$(($page+1))
        listProjectContainerRegistriesPage=$(pglab-project-container-registry-raw-list-in-page "$gitlabToken" "$projectParam" "$includeTags" "$includeDetailedTags" "$per_page" "$page")
        exitCode=$?
        if [ $exitCode -ne 0 ]; then
            return $exitCode
        fi
        listProjectContainerRegistries=$(pglab-json-array-join "$listProjectContainerRegistries" "$listProjectContainerRegistriesPage")
        page_empty=$(pglab-json-array-is-empty "$listProjectContainerRegistriesPage")
    done

    echo "$listProjectContainerRegistries" | jq .
    return $?
}

function pglab-project-container-registry-list () {
    local PER_PAGE=1000
    local PAGE=""
    local HELP=""
    local PROJECT_PARAM=""
    local includeTags=""
    local includeDetailedTags=""
    if [[ "$1" == "help" ]]; then
        HELP="true"
    else
        while true; do
            case "$1" in
                --project=*) PROJECT_PARAM="${1#*=}"; shift 1 ;;
                --project) PROJECT_PARAM="$2"; shift 2 ;;
                --tags) includeTags=true; shift 1 ;;
                --detailed-tags) includeDetailedTags=true; shift 1 ;;
                --per-page=*) PER_PAGE="${1#*=}"; shift 1 ;;
                --per-page) PER_PAGE="$2"; shift 2 ;;
                --page=*) PAGE="${1#*=}"; shift 1 ;;
                --page) PAGE="$2"; shift 2 ;;
                --) addErrorMessage "Invalid option '$1'"; shift ;;
                -*|--*) addErrorMessage "Invalid option '$1'"; shift ;;
                * )
                    [ -z ${1+x} ] && break
                    addErrorMessage "Invalid parameter with value '$1'"
                    shift 1
                ;;
            esac
        done
    fi
    function verifyParameters () {
        if [ -z "${PROJECT_PARAM}" ]; then
            addErrorMessage "Parameter project (--project) is required"
        fi
    }
    if [[ "$HELP" == "true" ]]; then
        pglab-project-container-registry-list-help
        return $?
    fi
    if [[ "$USAGE" == "true" ]]; then
        >&2 pglab-usage false false
        return $?
    fi
    check-dependencies-parameters verifyParameters false false
    exitCode=$?
    if [ $exitCode -ne 0 ]; then
        return $exitCode
    fi

    if [ ! -z "$PAGE" ]; then
        pglab-project-container-registry-raw-list-in-page "$GITLAB_TOKEN" "$PROJECT_PARAM" "$includeTags" "$includeDetailedTags" "$PER_PAGE" "$PAGE"
        return $?
    fi
    pglab-project-container-registry-raw-list "$GITLAB_TOKEN" "$PROJECT_PARAM" "$includeTags" "$includeDetailedTags" "$PER_PAGE"
    return $?
}

function pglab-project-container-registry-list-help () {
    echo "$(cat <<EOF
_COMMAND_ENTRYPOINT_()

NAME
       _COMMAND_ENTRYPOINT_ -

DESCRIPTION
       Get a list of container repositories in a project

SYNOPSIS
            _COMMAND_ENTRYPOINT_
          [help]
          --project <value>

HELP COMMAND
       help

       display this help and exit

OPTIONS
       --project (string|number)
          The project to get container registries.

          This parameter value is the project ID if it is a number, or if
          it is not a number this parameter value is the project full path.

       --tags
          If used, include container registry tags

       --detailed-tags
          If used, include container registry tags with its details

EOF
)" | sed -E "s#_COMMAND_ENTRYPOINT_#$commandEntrypoint#g" | less
    return $?
}
[[ "$PGLAB_IGNORE_SCRIPT_AUTOSTART" != "true" ]] && commandExecAutostart="$(basename "$(readlink -f -- "$0")" | sed -E "s/ /-/g")"
if [[ "$commandExecAutostart" == "pglab-project-container-registry-list" ]]; then
    [[ -L "$0" ]] \
        && SCRIPT_DIR=$(dirname -- "$( readlink -f -- "$0"; )") \
        || SCRIPT_DIR="$(dirname "${BASH_SOURCE[0]}")"
    source "${SCRIPT_DIR}/../common/all"
    $commandExecAutostart $@
    exit $?
fi