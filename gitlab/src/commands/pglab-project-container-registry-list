#!/usr/bin/env bash
function pglab-project-container-registry-raw-list-in-page () {
    local gitlabToken="$1"
    local projectParam="$2"
    local includeTags="$3"
    local per_page="$4"
    local page="$5"
    local projectPath="$(pglab-get-number-or-url-encoded "$projectParam")"
    local requestUrl=""
    local listProjectContainerRegistriesPage=""
    local exitCode=""
    requestUrl="https://gitlab.com/api/v4/projects/${projectPath}/registry/repositories?per_page=$per_page&page=$page"
    [[ "$includeTags" == "true" ]] && requestUrl="${requestUrl}&tags=true"
    listProjectContainerRegistriesPage=$(curl -s -f --header "Authorization: Bearer $gitlabToken" "${requestUrl}")
    exitCode="$?"
    if [ $exitCode -ne 0 ]; then
        >&2 echo -e "Error: failed request to get container registries in a project"
        return "$exitCode"
    fi

    echo "$listProjectContainerRegistriesPage" | jq .
    return $?
}
function pglab-project-container-registry-raw-list () {
    local gitlabToken="$1"
    local projectParam="$2"
    local includeTags="$3"
    local per_page="$4"
    local listProjectContainerRegistries="[]"
    local page=0
    local page_empty=false
    local listProjectContainerRegistriesPage=""
    while [ $page_empty != true ]; do
        page=$(($page+1))
        listProjectContainerRegistriesPage=$(pglab-project-container-registry-raw-list-in-page "$gitlabToken" "$projectParam" "$includeTags" "$per_page" "$page")
        exitCode=$?
        if [ $exitCode -ne 0 ]; then
            return $exitCode
        fi
        listProjectContainerRegistries=$(pglab-json-array-join "$listProjectContainerRegistries" "$listProjectContainerRegistriesPage")
        page_empty=$(pglab-json-array-is-empty "$listProjectContainerRegistriesPage")
    done

    echo "$listProjectContainerRegistries" | jq .
    return $?
}

function pglab-project-container-registry-list () {
    local PER_PAGE=1000
    local PAGE=""
    local HELP=""
    local PROJECT_PARAM=""
    local includeTags=""
    if [[ "$1" == "help" ]]; then
        HELP="true"
    else
        while true; do
            case "$1" in
                --project=*) PROJECT_PARAM="${1#*=}"; shift 1 ;;
                --project) PROJECT_PARAM="$2"; shift 2 ;;
                --tags) includeTags=true; shift 1 ;;
                --per-page=*) PER_PAGE="${1#*=}"; shift 1 ;;
                --per-page) PER_PAGE="$2"; shift 2 ;;
                --page=*) PAGE="${1#*=}"; shift 1 ;;
                --page) PAGE="$2"; shift 2 ;;
                --) addErrorMessage "Invalid option '$1'"; shift ;;
                -*|--*) addErrorMessage "Invalid option '$1'"; shift ;;
                * )
                    [ -z ${1+x} ] && break
                    addErrorMessage "Invalid parameter with value '$1'"
                    shift 1
                ;;
            esac
        done
    fi
    function verifyParameters () {
        if [ -z "${PROJECT_PARAM}" ]; then
            addErrorMessage "Parameter project (--project) is required"
        fi
    }
    if [[ "$HELP" == "true" ]]; then
        pglab-project-container-registry-list-help
        return $?
    fi
    if [[ "$USAGE" == "true" ]]; then
        >&2 pglab-usage false false
        return $?
    fi
    check-dependencies-parameters verifyParameters false false
    exitCode=$?
    if [ $exitCode -ne 0 ]; then
        return $exitCode
    fi

    if [ ! -z "$PAGE" ]; then
        pglab-project-container-registry-raw-list-in-page "$GITLAB_TOKEN" "$PROJECT_PARAM" "$includeTags" "$PER_PAGE" "$PAGE"
        return $?
    fi
    pglab-project-container-registry-raw-list "$GITLAB_TOKEN" "$PROJECT_PARAM" "$includeTags" "$PER_PAGE"
    return $?
}

function pglab-project-container-registry-list-help () {
    echo "$(cat <<EOF
_COMMAND_ENTRYPOINT_()

NAME
       _COMMAND_ENTRYPOINT_ -

DESCRIPTION
       Get a list of container repositories in a project

SYNOPSIS
            _COMMAND_ENTRYPOINT_
          [help]
          --project <value>

HELP COMMAND
       help

       display this help and exit

OPTIONS
       --project (string|number)
          The project to get container registries.

          This parameter value is the project ID if it is a number, or if
          it is not a number this parameter value is the project full path.

       --tags
          If used, include container registry tags

EOF
)" | sed -E "s#_COMMAND_ENTRYPOINT_#$commandEntrypoint#g" | less
    return $?
}
[[ "$PGLAB_IGNORE_SCRIPT_AUTOSTART" != "true" ]] && commandExecAutostart="$(basename "$(readlink -f -- "$0")" | sed -E "s/ /-/g")"
if [[ "$commandExecAutostart" == "pglab-project-container-registry-list" ]]; then
    [[ -L "$0" ]] \
        && SCRIPT_DIR=$(dirname -- "$( readlink -f -- "$0"; )") \
        || SCRIPT_DIR="$(dirname "${BASH_SOURCE[0]}")"
    source "${SCRIPT_DIR}/../common/all"
    $commandExecAutostart $@
    exit $?
fi