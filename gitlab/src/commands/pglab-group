#!/usr/bin/env bash
function pglab-group () {
    local HELP=""
    if [[ "$1" == "help" ]]; then
        HELP="true"
    else
        while true; do
            case "$1" in
                get|list-subgroups) command=$1; shift 1; break ;;
                --) addErrorMessage "Invalid option '$1'"; shift ;;
                -*|--*) addErrorMessage "Invalid option '$1'"; shift ;;
                * )
                    [ -z ${1+x} ] && break
                    addErrorMessage "Invalid command choice '$1', valid choices are: get, list-subgroups"
                    break
                ;;
            esac
        done
    fi
    if [[ "$HELP" == "true" ]]; then
        pglab-group-help
        return $?
    fi
    if [[ "$USAGE" == "true" ]]; then
        pglab-usage true false
        return $?
    fi

    if [[ "$command" != "" ]]; then
        use-command "$command" $@
        return $?
    fi
    check-dependencies-parameters "" true false
    if [ $? -ne 0 ]; then
        return $?
    fi

    echo
    pglab-raw-usage true false
    if [ $? -ne 0 ]; then
        return $?
    fi
    echo 
    echo "$commandEntrypoint: error: the following arguments are required: subcommand"
    echo
}

function pglab-group-help () {
    echo "$(cat <<EOF
_COMMAND_ENTRYPOINT_()

NAME
       _COMMAND_ENTRYPOINT_ -

DESCRIPTION
       Gitlab group is an structure of Gitlab that has in it Gitlab projects
       that has repository and other things related to it, as variables and
       other configurations used on it.

SYNOPSIS
          _COMMAND_ENTRYPOINT_ [options] <command> [parameters]

       Use command help for information on a specific command. The synopsis for
       each command shows its parameters and their usage. Optional  parameters
       are shown in square brackets.

HELP COMMAND
       help

       display this help and exit

AVAILABLE COMMANDS
       o get
       o list-subgroups

EOF
)" | sed -E "s#_COMMAND_ENTRYPOINT_#$commandEntrypoint#g" | less
    return $?
}
[[ "$PGLAB_IGNORE_SCRIPT_AUTOSTART" != "true" ]] && commandExecAutostart="$(basename "$(readlink -f -- "$0")" | sed -E "s/ /-/g")"
if [[ "$commandExecAutostart" == "pglab-group" ]]; then
    [[ -L "$0" ]] \
        && SCRIPT_DIR=$(dirname -- "$( readlink -f -- "$0"; )") \
        || SCRIPT_DIR="$(dirname "${BASH_SOURCE[0]}")"
    source "${SCRIPT_DIR}/../common/all"
    $commandExecAutostart $@
    exit $?
fi