#!/usr/bin/env bash
commandFunctionName="pglab-project-list"
if [[ "$PGLAB_IGNORE_SCRIPT_AUTOSTART" != "true" ]]; then
    SCRIPT_DIR_COMMANDS="$(dirname "${BASH_SOURCE[0]}")"
    SCRIPT_DIR_COMMAND_EXTENDED="${SCRIPT_DIR_COMMANDS}/${commandFunctionName}-extended"
    while read FILE; do
        source "${SCRIPT_DIR_COMMAND_EXTENDED}/$FILE"
    done <<< "$(ls "${SCRIPT_DIR_COMMAND_EXTENDED}" | xargs -E "\n" -I{} bash -c "[ -f "${SCRIPT_DIR_COMMAND_EXTENDED}/{}" ] && echo {}")"
fi

function pglab-project-list () {
    local PER_PAGE=1000
    local PAGE=""
    local GROUP_PARAM=""
    local USER_PARAM=""
    local NAMESPACE_PARAM=""
    local isRecursive=false
    if [[ "$1" == "help" ]]; then
        HELP="true"
    else
        while true; do
            case "$1" in
                --group=*) GROUP_PARAM="${1#*=}"; shift 1 ;;
                --group) GROUP_PARAM="$2";  shift 2 ;;
                --user=*) USER_PARAM="${1#*=}"; shift 1 ;;
                --user) USER_PARAM="$2";  shift 2 ;;
                --namespace=*) NAMESPACE_PARAM="${1#*=}"; shift 1 ;;
                --namespace) NAMESPACE_PARAM="$2";  shift 2 ;;
                --per-page=*) PER_PAGE="${1#*=}"; shift 1 ;;
                --per-page) PER_PAGE="$2";  shift 2 ;;
                --page=*) PAGE="${1#*=}"; shift 1 ;;
                --page) PAGE="$2";  shift 2 ;;
                --recursive) isRecursive=true; shift 1 ;;
                --) addErrorMessage "Invalid option '$1'"; shift ;;
                -*|--*) addErrorMessage "Invalid option '$1'"; shift ;;
                * )
                    [ -z ${1+x} ] && break
                    addErrorMessage "Invalid parameter with value '$1'"
                    shift 1
                ;;
            esac
        done
    fi
    function verifyParameters () {
        if [ -z "$GROUP_PARAM" ] && [ -z "$USER_PARAM" ] && [ -z "$NAMESPACE_PARAM" ]; then
            addErrorMessage "Parameter group (--group), user (--user) or namespace (--namespace) is required"
        else
            COUNT_NS_PARAMS=0
            [ ! -z "$GROUP_PARAM" ] && COUNT_NS_PARAMS=$((COUNT_NS_PARAMS+1))
            [ ! -z "$USER_PARAM" ] && COUNT_NS_PARAMS=$((COUNT_NS_PARAMS+1))
            [ ! -z "$NAMESPACE_PARAM" ] && COUNT_NS_PARAMS=$((COUNT_NS_PARAMS+1))
            if [ $COUNT_NS_PARAMS -gt 1 ]; then
                addErrorMessage "Only one parameter group (--group), user (--user) or namespace (--namespace) can be used"
            fi
        fi
        if [ ! -z "$USER_PARAM" ] && [[ "$isRecursive" == "true" ]]; then
            addErrorMessage "Cannot use user (--user) and recursive (--recursive) together"
        fi
        if [ ! -z "$PAGE" ] && [[ "$isRecursive" == "true" ]]; then
            addErrorMessage "Cannot use page (--page) and recursive (--recursive) together"
        fi
    }
    if [[ "$HELP" == "true" ]]; then
        pglab-project-list-help
        return $?
    fi
    if [[ "$USAGE" == "true" ]]; then
        pglab-usage false false
        return $?
    fi
    check-dependencies-parameters verifyParameters false false
    if [ $? -ne 0 ]; then
        return $?
    fi

    if [ ! -z "$GROUP_PARAM" ] || [ ! -z "$USER_PARAM" ] || [ ! -z "$NAMESPACE_PARAM" ]; then
        isGroup=false
        if [ ! -z "$NAMESPACE_PARAM" ]; then
            pglab --restart-entrypoint group get --group "$NAMESPACE_PARAM" > /dev/null && isGroup=true
            groupParamToUse="$NAMESPACE_PARAM"
            userParamToUse="$NAMESPACE_PARAM"
        else
            [ ! -z "$GROUP_PARAM" ] && isGroup=true && groupParamToUse="$GROUP_PARAM"
            [ -z "$GROUP_PARAM" ] && userParamToUse="$USER_PARAM"
        fi
        if [ ! -z "$PAGE" ]; then
            if [[ "$isGroup" == "true" ]]; then
                pglab-project-raw-list-by-group-in-page "$GITLAB_TOKEN" "$groupParamToUse" "$PER_PAGE" "$PAGE"
            else
                pglab-project-raw-list-by-user-in-page "$GITLAB_TOKEN" "$userParamToUse" "$PER_PAGE" "$PAGE"
            fi
            return $?
        fi
        if [[ "$isGroup" == "true" ]]; then
            if [[ "$isRecursive" == "true" ]]; then
                pglab-project-raw-list-by-group-recursive "$GITLAB_TOKEN" "$groupParamToUse" "$PER_PAGE"
            else
                pglab-project-raw-list-by-group "$GITLAB_TOKEN" "$groupParamToUse" "$PER_PAGE"
            fi
        else
            pglab-project-raw-list-by-user "$GITLAB_TOKEN" "$userParamToUse" "$PER_PAGE"
        fi
        return $?
    fi

    pglab-usage false false
    return $?
}

[[ "$PGLAB_IGNORE_SCRIPT_AUTOSTART" != "true" ]] && commandExecAutostart="$(basename "$(readlink -f -- "$0")" | sed -E "s/ /-/g")"
if [[ "$commandExecAutostart" == "$commandFunctionName" ]]; then
    [[ -L "$0" ]] \
        && SCRIPT_DIR=$(dirname -- "$( readlink -f -- "$0"; )") \
        || SCRIPT_DIR="$(dirname "${BASH_SOURCE[0]}")"
    source "${SCRIPT_DIR}/../common/all"
    $commandExecAutostart $@
    exit $?
fi