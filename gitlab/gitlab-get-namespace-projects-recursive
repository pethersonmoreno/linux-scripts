#!/bin/bash

# check dependencies
if [ -z $(type -p jq) ]; then
    1>&2 printf "[ ERROR ] need 'jq' dependency to parse json."
    exit 1
fi

# If script dir is not in PATH, add it
SCRIPT_DIR=$(dirname -- "$( readlink -f -- "$0"; )")
echo "$PATH" | sed -E "s/:/\n/g" | grep -E "^${SCRIPT_DIR}$" > /dev/null && ADD_TO_PATH=false || ADD_TO_PATH=true
if [ "$ADD_TO_PATH" == "true" ]; then
    export PATH="${SCRIPT_DIR}:${PATH}"
fi

source "$SCRIPT_DIR/.gitlab-default-values"
commandInfo=$(echo "COMMAND NAME
       $0 - get all projects from the namespace (group or user) and in its sub namespaces
    (groups and/or users) recursively

SYNOPSIS
       $0 [OPTION]... NAMESPACE

PARAMETERS
       NAMESPACE [required]
              If it is a number, then it is the group id, it is used to get all projects in the
           group including projects in its subgroups recursively or it is the user id, it is
           used to get all projects in user namespace.

              But if it is not a number, then it is the group full path, it is used to get all
           projects in the group including projects in its subgroups recursively or it is the
           username, it is used to get all projects in user namespace.

OPTIONS
       --help
              display this help and exit

       --man
              display this help with less, like command man, then exit

VARIABLES
       GITLAB_TOKEN [required]
              a gitlab token used to iterate with Gitlab API endpoints

       EXPR_GET_GROUP_JSON [optional]
              jq filter applied in group to get only specified fields.
              It needs the fields id and full_path.
              Default value = \"${DEFAULT_EXPR_GET_GROUP_JSON}\"

       EXPR_GET_USER_JSON [optional]
              jq filter applied in user to get only specified fields.
              It needs the fields id and full_path.
              Default value = \"${DEFAULT_EXPR_GET_USER_JSON}\"

       EXPR_GET_SUBGROUPS_JSON [optional]
              jq filter applied in subgroup list to get only specified fields.
              It needs the fields id and full_path.
              Default value = \"${DEFAULT_EXPR_GET_SUBGROUPS_JSON}\"

       EXPR_GET_PROJECTS_JSON [optional]
              jq filter applied in project list to get only specified fields.
              Default value = \"${DEFAULT_EXPR_GET_PROJECTS_JSON}\"\n")


if [ "$1" == "--help" ]; then
    echo -e "${commandInfo}"
    exit 0
fi

if [ "$1" == "--man" ]; then
    echo -e "${commandInfo}" | less
    exit 0
fi

# Verify required variables and parameters
errorParameters=""
if [ -z ${GITLAB_TOKEN+x} ]; then
    msgErrorItem="Variable GITLAB_TOKEN is required"
    errorParameters=$(echo "${errorParameters}\n${msgErrorItem}")
fi
if [ -z ${1+x} ]; then
    msgErrorItem="Parameter NAMESPACE is required"
    errorParameters=$(echo "${errorParameters}\n${msgErrorItem}")
fi
if [ "$errorParameters" != "" ]; then
    errorParameters=$(echo "$errorParameters" | sed -E "s/^\\\n//")
    echo -e "Errors:\n$(echo -e "$errorParameters" | sed -E "s/^/ - /g")"
    echo -e "\nTry '$0 --help' or '$0 --man' for more information."
    exit 1
fi

# Getting default values to variables
if [ -z ${EXPR_GET_GROUP_JSON+x} ]; then
    export EXPR_GET_GROUP_JSON=$DEFAULT_EXPR_GET_GROUP_JSON
fi
if [ -z ${EXPR_GET_USER_JSON+x} ]; then
    export EXPR_GET_USER_JSON=$DEFAULT_EXPR_GET_USER_JSON
fi
if [ -z ${EXPR_GET_SUBGROUPS_JSON+x} ]; then
    export EXPR_GET_SUBGROUPS_JSON=$DEFAULT_EXPR_GET_SUBGROUPS_JSON
fi
if [ -z ${EXPR_GET_PROJECTS_JSON+x} ]; then
    export EXPR_GET_PROJECTS_JSON=$DEFAULT_EXPR_GET_PROJECTS_JSON
fi

NAMESPACE_PARAM="$1"

###########################################################################################
###########################################################################################
######      Get all projects                                                         ######
######      If NAMESPACE is a group, then get all projects in the group and in its   ######
######   subgroups recursively                                                       ######
######      If NAMESPACE is a user, then get all projects in the user namespace      ######
###########################################################################################
###########################################################################################

PENDING_NAMESPACES="$NAMESPACE_PARAM"
NAMESPACE_PROJECTS="[]"
while [ "$PENDING_NAMESPACES" != "" ]; do
    NAMESPACE_ITEM=$(echo "$PENDING_NAMESPACES" | sed -E "s/^([^ ]+)( .+)?/\1/")
    PENDING_NAMESPACES=$(echo "$PENDING_NAMESPACES" | sed -E "s/^[^ ]+ ?//")
    # Verify if namespace item value is a number
    if [ "$((( $NAMESPACE_ITEM )) 2>/dev/null && echo $? || echo $?)" -eq 0 ]; then
        SEARCH_BY="ID"
        NAMESPACE_ITEM_ID="$NAMESPACE_ITEM"
        NAMESPACE_ITEM_PATH="$NAMESPACE_ITEM_ID"
    else
        SEARCH_BY="FULL_PATH"
        NAMESPACE_ITEM_FULL_PATH_PARSED=$(echo "$NAMESPACE_ITEM" | sed -E "s/\//%2F/g")
        NAMESPACE_ITEM_PATH="$NAMESPACE_ITEM_FULL_PATH_PARSED"
    fi

    # Get group data detail
    NAMESPACE_ITEM_TYPE=GROUP
    NAMESPACE_ITEM_GROUP_REQUEST_URL="https://gitlab.com/api/v4/groups/${NAMESPACE_ITEM_PATH}"
    NAMESPACE_ITEM_DATA=$(curl -s -f --header "Authorization: Bearer $GITLAB_TOKEN" "${NAMESPACE_ITEM_GROUP_REQUEST_URL}")
    if [ $? -eq 0 ]; then
        NAMESPACE_ITEM_DATA=$(echo "$NAMESPACE_ITEM_DATA" | jq "$EXPR_GET_GROUP_JSON")
    else
        # If failed try get user data detail instead of group detail
        NAMESPACE_ITEM_TYPE=USER
        if [ "$SEARCH_BY" == "ID" ]; then
            NAMESPACE_ITEM_REQUEST_URL="https://gitlab.com/api/v4/users/${NAMESPACE_ITEM_PATH}"
        elif [ "$SEARCH_BY" == "FULL_PATH" ]; then
            NAMESPACE_ITEM_REQUEST_URL="https://gitlab.com/api/v4/users?username=${NAMESPACE_ITEM_PATH}"
        fi
        NAMESPACE_ITEM_DATA=$(curl -s -f --header "Authorization: Bearer $GITLAB_TOKEN" "${NAMESPACE_ITEM_REQUEST_URL}")
        if [ $? -ne 0 ]; then
            echo -e "Error: failed request to get group detail and project detail"
            exit 1
        fi
        if [ "$SEARCH_BY" == "FULL_PATH" ]; then
            NAMESPACE_ITEM_DATA=$(echo "$NAMESPACE_ITEM_DATA" | jq ".[]")
        fi
        NAMESPACE_ITEM_DATA=$(echo "$NAMESPACE_ITEM_DATA" | jq "$EXPR_GET_USER_JSON")
    fi

    NAMESPACE_ITEM_ID=$(echo "$NAMESPACE_ITEM_DATA" | jq -r ".id")
    NAMESPACE_ITEM_PROJECTS=$(gitlab-get-namespace-projects "$NAMESPACE_ITEM_ID")
    NAMESPACE_PROJECTS=$((echo "$NAMESPACE_PROJECTS" ; echo "$NAMESPACE_ITEM_PROJECTS") | jq '. + input')

    if [ "$NAMESPACE_ITEM_TYPE" == "GROUP" ]; then
        # Get subgroups of the current group, it will be used to get projects in this group
        GROUP_SUBGROUPS=$(curl -s --header "Authorization: Bearer $GITLAB_TOKEN" "https://gitlab.com/api/v4/groups/${NAMESPACE_ITEM_ID}/subgroups" | jq "$EXPR_GET_SUBGROUPS_JSON" | jq --slurp '.')
        # If found at least one subgroup, add it to pending groups to get projects
        GROUP_SUBGROUPS_FULL_PATHS=$(echo "$GROUP_SUBGROUPS" | jq -r "[.[].full_path]|join(\" \")")
        if [ "$GROUP_SUBGROUPS_FULL_PATHS" != "" ]; then
            PENDING_NAMESPACES=$(echo "$PENDING_NAMESPACES $GROUP_SUBGROUPS_FULL_PATHS" | sed -E "s/^[ ]+//")
        fi
    fi
done
# Just format json to view it in terminal
echo "$NAMESPACE_PROJECTS" | jq .