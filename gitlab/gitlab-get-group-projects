#!/bin/bash

# If script dir is not in PATH, add it
SCRIPT_DIR=$(dirname -- "$( readlink -f -- "$0"; )")
echo "$PATH" | sed -E "s/:/\n/g" | grep -E "^${SCRIPT_DIR}$" > /dev/null && ADD_TO_PATH=false || ADD_TO_PATH=true
if [ "$ADD_TO_PATH" == "true" ]; then
    export PATH="${SCRIPT_DIR}:${PATH}"
fi

source "$SCRIPT_DIR/.gitlab-default-values"
commandInfo=$(echo "COMMAND NAME
       $0 - get all projects from the namespace (group or user)

SYNOPSIS
       $0 [OPTION]... NAMESPACE

PARAMETERS
       NAMESPACE [required]
              If it is a number, then it is the group id, it is used to get all projects in
           the group or it is the user id, it is used to get all projects in user namespace

              But if it is not a number, then it is the group full path, it is used to get
           all projects in the group or it is username, it is used to get all projects in
           user namespace

OPTIONS
       --help
              display this help and exit

       --man
              display this help with less, like command man, then exit

VARIABLES
       GITLAB_TOKEN [required]
              a gitlab token used to iterate with Gitlab API endpoints

       EXPR_GET_GROUP_JSON [optional]
              jq filter applied in group to get only specified fields
              it needs the fields id and full_path
              default value = \"${DEFAULT_EXPR_GET_GROUP_JSON}\"

       EXPR_GET_PROJECTS_JSON [optional]
              jq filter applied in project list to get only specified fields
              default value = \"${DEFAULT_EXPR_GET_PROJECTS_JSON}\"\n")

if [ "$1" == "--help" ]; then
    echo -e "${commandInfo}"
    exit 0
fi

if [ "$1" == "--man" ]; then
    echo -e "${commandInfo}" | less
    exit 0
fi

# Verify required variables and parameters
errorParameters=""
if [ -z ${GITLAB_TOKEN+x} ]; then
    msgErrorItem="Variable GITLAB_TOKEN is required"
    errorParameters=$(echo "${errorParameters}\n${msgErrorItem}")
fi
if [ -z ${1+x} ]; then
    msgErrorItem="Parameter NAMESPACE is required"
    errorParameters=$(echo "${errorParameters}\n${msgErrorItem}")
fi
if [ "$errorParameters" != "" ]; then
    errorParameters=$(echo "$errorParameters" | sed -E "s/^\\\n//")
    echo -e "Errors:\n$(echo -e "$errorParameters" | sed -E "s/^/ - /g")"
    echo -e "\nTry '$0 --help' or '$0 --man' for more information."
    exit 1
fi

# Getting default values to variables
if [ -z ${EXPR_GET_GROUP_JSON+x} ]; then
    export EXPR_GET_GROUP_JSON=$DEFAULT_EXPR_GET_GROUP_JSON
fi
if [ -z ${EXPR_GET_PROJECTS_JSON+x} ]; then
    export EXPR_GET_PROJECTS_JSON=$DEFAULT_EXPR_GET_PROJECTS_JSON
fi

# Verify if parameter is number, then it is ID, or just full name
if [ "$((( $1 )) 2>/dev/null && echo $? || echo $?)" -eq 0 ]; then
    SEARCH_BY="ID"
    NAMESPACE_ID="$1"
    NAMESPACE_PATH="$NAMESPACE_ID"
else
    SEARCH_BY="FULL_PATH"
    NAMESPACE_FULL_PATH_PARSED=$(echo "$1" | sed -E "s/\//%2F/g")
    NAMESPACE_PATH="$NAMESPACE_FULL_PATH_PARSED"
fi

# Get all projects in the group
NAMESPACE_PROJECTS="[]"
per_page=1000
page=0
page_empty=false
while [ $page_empty != true ]; do
    page=$(($page+1))

    # Get projects in the group/user in the current page
    # Try get projects in the group in the current page
    REQUEST_URL="https://gitlab.com/api/v4/groups/${NAMESPACE_PATH}/projects?per_page=$per_page&page=$page"
    NAMESPACE_PROJECTS_PAGE=$(curl -s -f --header "Authorization: Bearer $GITLAB_TOKEN" "${REQUEST_URL}")
    # If failed try get projects in user namespace
    if [ $? -ne 0 ]; then
        REQUEST_URL="https://gitlab.com/api/v4/users/${NAMESPACE_PATH}/projects?per_page=$per_page&page=$page"
        NAMESPACE_PROJECTS_PAGE=$(curl -s -f --header "Authorization: Bearer $GITLAB_TOKEN" "${REQUEST_URL}")
        if [ $? -ne 0 ]; then
            echo -e "Error: failed request to get projects in group and user"
            exit 1
        fi
    fi

    NAMESPACE_PROJECTS_PAGE=$(echo "$NAMESPACE_PROJECTS_PAGE" | jq "$EXPR_GET_PROJECTS_JSON" | jq --slurp '.')
    NAMESPACE_PROJECTS=$((echo "$NAMESPACE_PROJECTS" ; echo "$NAMESPACE_PROJECTS_PAGE") | jq '. + input')

    # Verify if the current page doesn't have projects
    NAMESPACE_PROJECTS_PAGE_LENGTH=$(echo "$NAMESPACE_PROJECTS_PAGE" | jq ".|length")
    if [[ $NAMESPACE_PROJECTS_PAGE_LENGTH -eq 0 ]]; then
        page_empty=true
    fi
done

# Just format json to view it in terminal
echo "$NAMESPACE_PROJECTS" | jq .