#!/bin/bash

# check dependencies
if [ -z $(type -p jq) ]; then
    1>&2 printf "[ ERROR ] need 'jq' dependency to parse json."
    exit 1
fi

# If script dir is not in PATH, add it
SCRIPT_DIR=$(dirname -- "$( readlink -f -- "$0"; )")
echo "$PATH" | sed -E "s/:/\n/g" | grep -E "^${SCRIPT_DIR}$" > /dev/null && ADD_TO_PATH=false || ADD_TO_PATH=true
if [ "$ADD_TO_PATH" == "true" ]; then
    export PATH="${SCRIPT_DIR}:${PATH}"
fi

source "$SCRIPT_DIR/.gitlab-default-values"
commandInfo=$(echo "COMMAND NAME
       $0 - get all projects with variables from the namespace (group or user) and in its
    sub namespaces (groups and/or users) recursively

SYNOPSIS
       $0 [OPTION]... NAMESPACE

PARAMETERS
       NAMESPACE [required]
              If it is a number, then it is the group id, it is used to get all projects
           with variables in the group including projects in its subgroups recursively or it
           is the user id, it is used to get all projects with variables in user namespace.

              But if it is not a number, then it is the group full path, it is used to get
           all projects with variables in the group including projects in its subgroups
           recursively or it is the username, it is used to get all projects with variables
           in user namespace

OPTIONS
       --help
              display this help and exit

       --man
              display this help with less, like command man, then exit

VARIABLES
       GITLAB_TOKEN [required]
              a gitlab token used to iterate with Gitlab API endpoints

       EXPR_GET_GROUP_JSON [optional]
              jq filter applied in group to get only specified fields.
              It needs the fields id and full_path.
              Default value = \"${DEFAULT_EXPR_GET_GROUP_JSON}\"

       EXPR_GET_USER_JSON [optional]
              jq filter applied in user to get only specified fields.
              It needs the fields id and full_path.
              Default value = \"${DEFAULT_EXPR_GET_USER_JSON}\"

       EXPR_GET_SUBGROUPS_JSON [optional]
              jq filter applied in subgroup list to get only specified fields.
              It needs the fields id and full_path.
              Default value = \"${DEFAULT_EXPR_GET_SUBGROUPS_JSON}\"

       EXPR_GET_PROJECTS_JSON [optional]
              jq filter applied in project list to get only specified fields.
              Default value = \"${DEFAULT_EXPR_GET_PROJECTS_JSON}\"\n")


if [ "$1" == "--help" ]; then
    echo -e "${commandInfo}"
    exit 0
fi

if [ "$1" == "--man" ]; then
    echo -e "${commandInfo}" | less
    exit 0
fi

# Verify required variables and parameters
errorParameters=""
if [ -z ${GITLAB_TOKEN+x} ]; then
    msgErrorItem="Variable GITLAB_TOKEN is required"
    errorParameters=$(echo "${errorParameters}\n${msgErrorItem}")
fi
if [ -z ${1+x} ]; then
    msgErrorItem="Parameter NAMESPACE is required"
    errorParameters=$(echo "${errorParameters}\n${msgErrorItem}")
fi
if [ "$errorParameters" != "" ]; then
    errorParameters=$(echo "$errorParameters" | sed -E "s/^\\\n//")
    echo -e "Errors:\n$(echo -e "$errorParameters" | sed -E "s/^/ - /g")"
    echo -e "\nTry '$0 --help' or '$0 --man' for more information."
    exit 1
fi

NAMESPACE_PARAM="$1"

###########################################################################################
###########################################################################################
######      Get all projects with variables                                          ######
######      If NAMESPACE is a group, then get all projects with variables in the     ######
######   group and in its subgroups recursively                                      ######
######      If NAMESPACE is a user, then get all projects with variables in the      ######
######   user namespace                                                              ######
###########################################################################################
###########################################################################################

# Get all projects from the namespace and in its sub namespaces recursively
PROJECTS_LIST_JSON=$(gitlab-get-namespace-projects-recursive "${NAMESPACE_PARAM}")

PROJECTS_LENGTH=$(echo "$PROJECTS_LIST_JSON" | jq -r ".|length")

# Get variables to projects got and add projects with variables to result
PROJECT_WITH_VARS_LIST_JSON="[]"
PROJECTS_INDEX=0
while [ $PROJECTS_INDEX -lt $PROJECTS_LENGTH ]; do
    PROJECT_ITEM=$(echo "$PROJECTS_LIST_JSON" | jq -r ".[${PROJECTS_INDEX}]")
    PROJECT_ID=$(echo "$PROJECT_ITEM" | jq -r ".id")

    # Get project variables
    PROJECT_VARIABLES_JSON=$(gitlab-get-project-vars "${PROJECT_ID}")
    PROJECT_VARIABLES_LENGTH=$(echo "$PROJECT_VARIABLES_JSON" | jq -r ".|length")

    # If project has variables add the project with its variables to result
    if [ $PROJECT_VARIABLES_LENGTH -gt 0 ]; then
        PROJECT_ITEM_WITH_VARS=$((echo "$PROJECT_ITEM" ; echo "$PROJECT_VARIABLES_JSON") | jq '. + { variables: input }')
        PROJECT_WITH_VARS_LIST_JSON=$((echo "$PROJECT_WITH_VARS_LIST_JSON" ; echo "$PROJECT_ITEM_WITH_VARS") | jq '. + [ input ]')
    fi

    PROJECTS_INDEX=$(($PROJECTS_INDEX+1))
done

# Change projects with variables list to variables with its project list
echo "$PROJECT_WITH_VARS_LIST_JSON" | jq ".[]|[{project:(.|del(.variables)), variable: .variables[]}]|.[]" | jq --slurp .